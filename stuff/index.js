//Set Lat/Long & Zoom when loaded
var map = L.map('map').setView([30, -74], 5);

var CBOFS = new L.TileLayer.MVTSource({
	//Change this to the URL generated by API1 in template
	url: "<URL>/CBOFS/{z}/{x}/{y}.pbf",
	getIDForLayerFeature: function(feature) {
		return feature.properties.id;
	},
	//Style the data based on the type
	style: function (feature) {
		var style = {};
		var type = feature.type;
		switch (type) {
			case 1: //Point
				style.color = 'rgba(49,79,79,1)';
				style.radius = 5;
				break;
			case 2: //Line
				style.color = 'rgba(69, 255, 84, 1)';
				style.size = 3;
				break;
			case 3: //Polygon
				style.color = 'rgba(149,139,255,0.4)';
				style.outline = {
					color: 'rgb(20,20,20)',
					size: 1
				};
				break;
			default: //other
				style.color = 'rgba(69, 255, 84, 1)';
				style.size = 3;
		}
		return style;
	}
});
map.addLayer(CBOFS);

var landLayer = new L.TileLayer.MVTSource({
	// Land layer, could store this in another table or
	// we could use a public API
	url: "<URL>/{z}/{x}/{y}.pbf",
	getIDForLayerFeature: function(feature) {
		return feature.properties.id;
	},
	style: function (feature) {
		var style = {};
		var type = feature.type;
		switch (type) {
			case 1:
				style.color = 'rgba(49,79,79,1)';
				style.radius = 5;
				break;
			case 2:
				style.color = 'rgba(161,217,155,0.8)';
				style.size = 3;
				break;
			case 3:
				style.color = 'rgba(225,155,155,0.8)';
				style.outline = {
					color: 'rgb(20,20,20)',
					size: 1
				};
				break;
			default:
				style.color = 'rgba(69, 255, 84, 1)';
				style.size = 3;
		}
		return style;
	}
});
map.addLayer(landLayer);
